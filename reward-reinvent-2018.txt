import math


class Reward:
    def __init__(self, verbose=False):
        self.first_racingpoint_index = None
        self.verbose = verbose

    def reward_function(self, params):

        ################## HELPER FUNCTIONS ###################

        def dist_2_points(x1, x2, y1, y2):
            return abs(abs(x1-x2)**2 + abs(y1-y2)**2)**0.5

        def closest_2_racing_points_index(racing_coords, car_coords):

            # Calculate all distances to racing points
            distances = []
            for i in range(len(racing_coords)):
                distance = dist_2_points(x1=racing_coords[i][0], x2=car_coords[0],
                                         y1=racing_coords[i][1], y2=car_coords[1])
                distances.append(distance)

            # Get index of the closest racing point
            closest_index = distances.index(min(distances))

            # Get index of the second closest racing point
            distances_no_closest = distances.copy()
            distances_no_closest[closest_index] = 999
            second_closest_index = distances_no_closest.index(
                min(distances_no_closest))

            return [closest_index, second_closest_index]

        def dist_to_racing_line(closest_coords, second_closest_coords, car_coords):
            
            # Calculate the distances between 2 closest racing points
            a = abs(dist_2_points(x1=closest_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=closest_coords[1],
                                  y2=second_closest_coords[1]))

            # Distances between car and closest and second closest racing point
            b = abs(dist_2_points(x1=car_coords[0],
                                  x2=closest_coords[0],
                                  y1=car_coords[1],
                                  y2=closest_coords[1]))
            c = abs(dist_2_points(x1=car_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=car_coords[1],
                                  y2=second_closest_coords[1]))

            # Calculate distance between car and racing line (goes through 2 closest racing points)
            # try-except in case a=0 (rare bug in DeepRacer)
            try:
                distance = abs(-(a**4) + 2*(a**2)*(b**2) + 2*(a**2)*(c**2) -
                               (b**4) + 2*(b**2)*(c**2) - (c**4))**0.5 / (2*a)
            except:
                distance = b

            return distance

        # Calculate which one of the closest racing points is the next one and which one the previous one
        def next_prev_racing_point(closest_coords, second_closest_coords, car_coords, heading):

            # Virtually set the car more into the heading direction
            heading_vector = [math.cos(math.radians(
                heading)), math.sin(math.radians(heading))]
            new_car_coords = [car_coords[0]+heading_vector[0],
                              car_coords[1]+heading_vector[1]]

            # Calculate distance from new car coords to 2 closest racing points
            distance_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                        x2=closest_coords[0],
                                                        y1=new_car_coords[1],
                                                        y2=closest_coords[1])
            distance_second_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                               x2=second_closest_coords[0],
                                                               y1=new_car_coords[1],
                                                               y2=second_closest_coords[1])

            if distance_closest_coords_new <= distance_second_closest_coords_new:
                next_point_coords = closest_coords
                prev_point_coords = second_closest_coords
            else:
                next_point_coords = second_closest_coords
                prev_point_coords = closest_coords

            return [next_point_coords, prev_point_coords]

        def racing_direction_diff(closest_coords, second_closest_coords, car_coords, heading):

            # Calculate the direction of the center line based on the closest waypoints
            next_point, prev_point = next_prev_racing_point(closest_coords,
                                                            second_closest_coords,
                                                            car_coords,
                                                            heading)

            # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
            track_direction = math.atan2(
                next_point[1] - prev_point[1], next_point[0] - prev_point[0])

            # Convert to degree
            track_direction = math.degrees(track_direction)

            # Calculate the difference between the track direction and the heading direction of the car
            direction_diff = abs(track_direction - heading)
            if direction_diff > 180:
                direction_diff = 360 - direction_diff

            return direction_diff

        # Gives back indexes that lie between start and end index of a cyclical list 
        # (start index is included, end index is not)
        def indexes_cyclical(start, end, array_len):
            st = start or 0
            ed = end or 0
            if ed < st:
                ed = ed + array_len

            return [index % array_len for index in range(st, ed)]

        # Calculate how long car would take for entire lap, if it continued like it did until now
        def projected_time(first_index, closest_index, step_count, times_list):

            # Calculate how much time has passed since start
            current_actual_time = (step_count-1) / 15

            # Calculate which indexes were already passed
            indexes_traveled = indexes_cyclical(first_index, closest_index, len(times_list))

            # Calculate how much time should have passed if car would have followed optimals
            current_expected_time = sum([times_list[i] for i in indexes_traveled])

            # Calculate how long one entire lap takes if car follows optimals
            total_expected_time = sum(times_list)

            # Calculate how long car would take for entire lap, if it continued like it did until now
            try:
                projected_time = (current_actual_time/current_expected_time) * total_expected_time
            except:
                projected_time = 9999

            return projected_time

        #################### RACING LINE ######################

        # Optimal racing line for the Spain track
        # Each row: [x,y,speed,timeFromPreviousPoint]
        racing_track = [[2.89674, 0.70087, 4.0, 0.07644],
						[3.16466, 0.69299, 4.0, 0.06701],
						[3.43292, 0.68822, 4.0, 0.06708],
						[3.7378, 0.68548, 4.0, 0.07622],
						[4.10749, 0.68438, 4.0, 0.09242],
						[4.41121, 0.68403, 3.12057, 0.09733],
						[4.70859, 0.68388, 2.24061, 0.13273],
						[5.32, 0.68405, 1.94944, 0.31363],
						[5.42, 0.68409, 1.85711, 0.05385],
						[5.78, 0.68422, 1.84134, 0.19551],
						[6.21906, 0.69533, 1.84134, 0.23852],
						[6.40645, 0.72151, 1.84134, 0.10276],
						[6.55536, 0.76096, 1.84134, 0.08366],
						[6.69734, 0.82126, 1.84134, 0.08377],
						[6.83594, 0.90891, 1.82985, 0.08962],
						[6.9665, 1.02832, 1.79008, 0.09884],
						[7.07532, 1.17173, 1.79008, 0.10057],
						[7.1583, 1.33408, 1.79008, 0.10185],
						[7.2179, 1.53869, 1.79008, 0.11906],
						[7.23532, 1.73648, 1.79008, 0.11092],
						[7.20693, 1.95212, 1.79008, 0.1215],
						[7.09296, 2.21549, 1.80751, 0.15877],
						[6.92899, 2.40993, 1.89694, 0.13409],
						[6.71491, 2.56186, 2.06985, 0.12682],
						[6.47137, 2.66501, 2.34374, 0.11285],
						[6.21749, 2.7251, 2.09629, 0.12446],
						[5.97575, 2.75297, 2.09629, 0.11608],
						[5.76841, 2.76258, 2.09629, 0.09902],
						[5.50992, 2.76506, 2.09629, 0.12331],
						[5.22869, 2.76795, 2.09629, 0.13416],
						[5.09001, 2.78491, 2.09629, 0.06665],
						[4.95251, 2.8177, 2.13263, 0.06628],
						[4.78917, 2.87845, 2.32598, 0.07492],
						[4.57747, 2.99157, 2.57812, 0.0931],
						[4.34693, 3.15955, 2.93502, 0.09719],
						[4.14106, 3.34944, 2.19172, 0.12778],
						[3.96158, 3.54259, 1.85149, 0.14241],
						[3.81372, 3.71555, 1.79379, 0.12685],
						[3.68239, 3.8738, 1.79379, 0.11464],
						[3.54559, 4.0397, 1.79379, 0.11987],
						[3.33689, 4.25181, 1.79379, 0.16589],
						[3.20375, 4.34775, 1.79379, 0.09149],
						[3.08056, 4.41023, 1.79379, 0.077],
						[2.95986, 4.4508, 1.90974, 0.06668],
						[2.83501, 4.4763, 2.25555, 0.05649],
						[2.69115, 4.49181, 2.21014, 0.06547],
						[2.49788, 4.49811, 2.04097, 0.09475],
						[2.24938, 4.49143, 1.88469, 0.1319],
						[1.98175, 4.46208, 1.88469, 0.14285],
						[1.70276, 4.38826, 1.88469, 0.15312],
						[1.42171, 4.25289, 1.88469, 0.16552],
						[1.16383, 4.04393, 1.88469, 0.17611],
						[0.96114, 3.74548, 1.88469, 0.19142],
						[0.87449, 3.34577, 2.57223, 0.159],
						[0.86947, 3.00796, 3.13767, 0.10767],
						[0.89168, 2.76114, 3.79968, 0.06522],
						[0.92252, 2.55104, 2.71735, 0.07815],
						[0.96701, 2.30296, 1.5421, 0.16344],
						[1.00516, 2.10701, 1.3, 0.15356],
						[1.04306, 1.91271, 1.3, 0.15228],
						[1.09363, 1.66868, 1.3, 0.1917],
						[1.20742, 1.22666, 1.3, 0.3511],
						[1.24898, 1.12468, 1.3, 0.08471],
						[1.29166, 1.05197, 1.3, 0.06485],
						[1.34858, 0.98568, 1.30451, 0.06698],
						[1.42791, 0.92327, 1.47131, 0.0686],
						[1.54143, 0.8641, 1.82331, 0.07021],
						[1.71765, 0.80674, 2.49241, 0.07435],
						[2.14683, 0.74654, 4.0, 0.10835],
						[2.59129, 0.71477, 4.0, 0.1114]]


        ################## INPUT PARAMETERS ###################

        # Read all input parameters
        all_wheels_on_track = params['all_wheels_on_track']
        x = params['x']
        y = params['y']
        distance_from_center = params['distance_from_center']
        is_left_of_center = params['is_left_of_center']
        heading = params['heading']
        progress = params['progress']
        steps = params['steps']
        speed = params['speed']
        steering_angle = params['steering_angle']
        track_width = params['track_width']
        waypoints = params['waypoints']
        closest_waypoints = params['closest_waypoints']
        is_offtrack = params['is_offtrack']

        ############### OPTIMAL X,Y,SPEED,TIME ################

        # Get closest indexes for racing line (and distances to all points on racing line)
        closest_index, second_closest_index = closest_2_racing_points_index(
            racing_track, [x, y])

        # Get optimal [x, y, speed, time] for closest and second closest index
        optimals = racing_track[closest_index]
        optimals_second = racing_track[second_closest_index]

        # Save first racingpoint of episode for later
        if self.verbose == True:
            self.first_racingpoint_index = 0 # this is just for testing purposes
        if steps == 1:
            self.first_racingpoint_index = closest_index

        ################ REWARD AND PUNISHMENT ################

        ## Define the default reward ##
        reward = 1

        ## Reward if car goes close to optimal racing line ##
        DISTANCE_MULTIPLE = 1
        dist = dist_to_racing_line(optimals[0:2], optimals_second[0:2], [x, y])
        distance_reward = max(1e-3, 1 - (dist/(track_width*0.5)))
        reward += distance_reward * DISTANCE_MULTIPLE

        ## Reward if speed is close to optimal speed ##
        SPEED_DIFF_NO_REWARD = 1
        SPEED_MULTIPLE = 2
        speed_diff = abs(optimals[2]-speed)
        if speed_diff <= SPEED_DIFF_NO_REWARD:
            # we use quadratic punishment (not linear) bc we're not as confident with the optimal speed
            # so, we do not punish small deviations from optimal speed
            speed_reward = (1 - (speed_diff/(SPEED_DIFF_NO_REWARD))**2)**2
        else:
            speed_reward = 0
        reward += speed_reward * SPEED_MULTIPLE

        # Reward if less steps
        REWARD_PER_STEP_FOR_FASTEST_TIME = 1 
        STANDARD_TIME = 25
        FASTEST_TIME = 8
        times_list = [row[3] for row in racing_track]
        projected_time = projected_time(self.first_racingpoint_index, closest_index, steps, times_list)
        try:
            steps_prediction = projected_time * 15 + 1
            reward_prediction = max(1e-3, (-REWARD_PER_STEP_FOR_FASTEST_TIME*(FASTEST_TIME) /
                                           (STANDARD_TIME-FASTEST_TIME))*(steps_prediction-(STANDARD_TIME*15+1)))
            steps_reward = min(REWARD_PER_STEP_FOR_FASTEST_TIME, reward_prediction / steps_prediction)
        except:
            steps_reward = 0
        reward += steps_reward

        # Zero reward if obviously wrong direction (e.g. spin)
        direction_diff = racing_direction_diff(
            optimals[0:2], optimals_second[0:2], [x, y], heading)
        if direction_diff > 30:
            reward = 1e-3
            
        # Zero reward of obviously too slow
        speed_diff_zero = optimals[2]-speed
        if speed_diff_zero > 0.5:
            reward = 1e-3
            
        ## Incentive for finishing the lap in less steps ##
        REWARD_FOR_FASTEST_TIME = 1500 # should be adapted to track length and other rewards
        STANDARD_TIME = 25  # seconds (time that is easily done by model)
        FASTEST_TIME = 8  # seconds (best time of 1st place on the track)
        if progress == 100:
            finish_reward = max(1e-3, (-REWARD_FOR_FASTEST_TIME /
                      (15*(STANDARD_TIME-FASTEST_TIME)))*(steps-STANDARD_TIME*15))
        else:
            finish_reward = 0
        reward += finish_reward
        
        ## Zero reward if off track ##
        if all_wheels_on_track == False:
            reward = 1e-3

        ####################### VERBOSE #######################
        
        if self.verbose == True:
            print("Closest index: %i" % closest_index)
            print("Distance to racing line: %f" % dist)
            print("=== Distance reward (w/out multiple): %f ===" % (distance_reward))
            print("Optimal speed: %f" % optimals[2])
            print("Speed difference: %f" % speed_diff)
            print("=== Speed reward (w/out multiple): %f ===" % speed_reward)
            print("Direction difference: %f" % direction_diff)
            print("Predicted time: %f" % projected_time)
            print("=== Steps reward: %f ===" % steps_reward)
            print("=== Finish reward: %f ===" % finish_reward)
            
        #################### RETURN REWARD ####################
        
        # Always return a float value
        return float(reward)


reward_object = Reward() # add parameter verbose=True to get noisy output for testing


def reward_function(params):
    return reward_object.reward_function(params)